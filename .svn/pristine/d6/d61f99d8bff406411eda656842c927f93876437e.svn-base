<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xykj.crowdfunding.reverse.dao.AccountMapper" >
  <resultMap id="BaseResultMap" type="com.xykj.crowdfunding.reverse.pojo.Account" >
    <id column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="nick_name" property="nickName" jdbcType="VARCHAR" />
    <result column="real_name" property="realName" jdbcType="VARCHAR" />
    <result column="total_account" property="totalAccount" jdbcType="DECIMAL" />
    <result column="usable_amount" property="usableAmount" jdbcType="DECIMAL" />
    <result column="un_receive_interest" property="unReceiveInterest" jdbcType="DECIMAL" />
    <result column="receive_principal" property="receivePrincipal" jdbcType="DECIMAL" />
    <result column="to_return_to_the_principal_and_interest" property="toReturnToThePrincipalAndInterest" jdbcType="DECIMAL" />
    <result column="trader_password" property="traderPassword" jdbcType="VARCHAR" />
    <result column="block_account" property="blockAccount" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    account_id, user_id, nick_name, real_name, total_account, usable_amount, un_receive_interest, 
    receive_principal, to_return_to_the_principal_and_interest, trader_password, block_account
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xykj.crowdfunding.reverse.pojo.AccountExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from account
    where account_id = #{accountId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from account
    where account_id = #{accountId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xykj.crowdfunding.reverse.pojo.AccountExample" >
    delete from account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xykj.crowdfunding.reverse.pojo.Account" >
    insert into account (account_id, user_id, nick_name, 
      real_name, total_account, usable_amount, 
      un_receive_interest, receive_principal, to_return_to_the_principal_and_interest, 
      trader_password, block_account)
    values (#{accountId,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{realName,jdbcType=VARCHAR}, #{totalAccount,jdbcType=DECIMAL}, #{usableAmount,jdbcType=DECIMAL}, 
      #{unReceiveInterest,jdbcType=DECIMAL}, #{receivePrincipal,jdbcType=DECIMAL}, #{toReturnToThePrincipalAndInterest,jdbcType=DECIMAL}, 
      #{traderPassword,jdbcType=VARCHAR}, #{blockAccount,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.xykj.crowdfunding.reverse.pojo.Account" >
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="nickName != null" >
        nick_name,
      </if>
      <if test="realName != null" >
        real_name,
      </if>
      <if test="totalAccount != null" >
        total_account,
      </if>
      <if test="usableAmount != null" >
        usable_amount,
      </if>
      <if test="unReceiveInterest != null" >
        un_receive_interest,
      </if>
      <if test="receivePrincipal != null" >
        receive_principal,
      </if>
      <if test="toReturnToThePrincipalAndInterest != null" >
        to_return_to_the_principal_and_interest,
      </if>
      <if test="traderPassword != null" >
        trader_password,
      </if>
      <if test="blockAccount != null" >
        block_account,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null" >
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="totalAccount != null" >
        #{totalAccount,jdbcType=DECIMAL},
      </if>
      <if test="usableAmount != null" >
        #{usableAmount,jdbcType=DECIMAL},
      </if>
      <if test="unReceiveInterest != null" >
        #{unReceiveInterest,jdbcType=DECIMAL},
      </if>
      <if test="receivePrincipal != null" >
        #{receivePrincipal,jdbcType=DECIMAL},
      </if>
      <if test="toReturnToThePrincipalAndInterest != null" >
        #{toReturnToThePrincipalAndInterest,jdbcType=DECIMAL},
      </if>
      <if test="traderPassword != null" >
        #{traderPassword,jdbcType=VARCHAR},
      </if>
      <if test="blockAccount != null" >
        #{blockAccount,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xykj.crowdfunding.reverse.pojo.AccountExample" resultType="java.lang.Integer" >
    select count(*) from account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update account
    <set >
      <if test="record.accountId != null" >
        account_id = #{record.accountId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.nickName != null" >
        nick_name = #{record.nickName,jdbcType=VARCHAR},
      </if>
      <if test="record.realName != null" >
        real_name = #{record.realName,jdbcType=VARCHAR},
      </if>
      <if test="record.totalAccount != null" >
        total_account = #{record.totalAccount,jdbcType=DECIMAL},
      </if>
      <if test="record.usableAmount != null" >
        usable_amount = #{record.usableAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.unReceiveInterest != null" >
        un_receive_interest = #{record.unReceiveInterest,jdbcType=DECIMAL},
      </if>
      <if test="record.receivePrincipal != null" >
        receive_principal = #{record.receivePrincipal,jdbcType=DECIMAL},
      </if>
      <if test="record.toReturnToThePrincipalAndInterest != null" >
        to_return_to_the_principal_and_interest = #{record.toReturnToThePrincipalAndInterest,jdbcType=DECIMAL},
      </if>
      <if test="record.traderPassword != null" >
        trader_password = #{record.traderPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.blockAccount != null" >
        block_account = #{record.blockAccount,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update account
    set account_id = #{record.accountId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=VARCHAR},
      nick_name = #{record.nickName,jdbcType=VARCHAR},
      real_name = #{record.realName,jdbcType=VARCHAR},
      total_account = #{record.totalAccount,jdbcType=DECIMAL},
      usable_amount = #{record.usableAmount,jdbcType=DECIMAL},
      un_receive_interest = #{record.unReceiveInterest,jdbcType=DECIMAL},
      receive_principal = #{record.receivePrincipal,jdbcType=DECIMAL},
      to_return_to_the_principal_and_interest = #{record.toReturnToThePrincipalAndInterest,jdbcType=DECIMAL},
      trader_password = #{record.traderPassword,jdbcType=VARCHAR},
      block_account = #{record.blockAccount,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xykj.crowdfunding.reverse.pojo.Account" >
    update account
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null" >
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        real_name = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="totalAccount != null" >
        total_account = #{totalAccount,jdbcType=DECIMAL},
      </if>
      <if test="usableAmount != null" >
        usable_amount = #{usableAmount,jdbcType=DECIMAL},
      </if>
      <if test="unReceiveInterest != null" >
        un_receive_interest = #{unReceiveInterest,jdbcType=DECIMAL},
      </if>
      <if test="receivePrincipal != null" >
        receive_principal = #{receivePrincipal,jdbcType=DECIMAL},
      </if>
      <if test="toReturnToThePrincipalAndInterest != null" >
        to_return_to_the_principal_and_interest = #{toReturnToThePrincipalAndInterest,jdbcType=DECIMAL},
      </if>
      <if test="traderPassword != null" >
        trader_password = #{traderPassword,jdbcType=VARCHAR},
      </if>
      <if test="blockAccount != null" >
        block_account = #{blockAccount,jdbcType=DECIMAL},
      </if>
    </set>
    where account_id = #{accountId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xykj.crowdfunding.reverse.pojo.Account" >
    update account
    set user_id = #{userId,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      real_name = #{realName,jdbcType=VARCHAR},
      total_account = #{totalAccount,jdbcType=DECIMAL},
      usable_amount = #{usableAmount,jdbcType=DECIMAL},
      un_receive_interest = #{unReceiveInterest,jdbcType=DECIMAL},
      receive_principal = #{receivePrincipal,jdbcType=DECIMAL},
      to_return_to_the_principal_and_interest = #{toReturnToThePrincipalAndInterest,jdbcType=DECIMAL},
      trader_password = #{traderPassword,jdbcType=VARCHAR},
      block_account = #{blockAccount,jdbcType=DECIMAL}
    where account_id = #{accountId,jdbcType=INTEGER}
  </update>
</mapper>